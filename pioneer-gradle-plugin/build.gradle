apply plugin: "groovy"
apply plugin: "maven-publish"

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

buildscript {
    repositories {
        // 阿里仓库地址 https://maven.aliyun.com/mvn/guide
        maven { url 'https://maven.aliyun.com/repository/public'}
        maven { url "https://maven.aliyun.com/repository/google" }
        maven { url "https://maven.aliyun.com/repository/gradle-plugin" }
    }
    dependencies {
//        classpath 'com.novoda:bintray-release:0.3.4'
    }
}

dependencies {
    compileOnly gradleApi()
    compileOnly localGroovy()
    implementation 'com.android.tools:common:30.0.3'
    implementation 'com.android.tools.build:gradle:7.0.3'
    implementation "com.alibaba:fastjson:1.2.51"
}

def localProperties = new Properties()
def localPropertiesFile = new File(rootDir, 'local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}
def repoUrlRelease = localProperties.getProperty('MAVEN_URL_RELEASE')
def repoUrlSnapshots = localProperties.getProperty('MAVEN_URL_SNAPSHOT')
def repoUrlAccountName = localProperties.getProperty('MAVEN_ACCOUNT_NAME')
def repoUrlAccountPwd = localProperties.getProperty('MAVEN_ACCOUNT_PWD')

def artifact_group = 'com.galaxybruce.android'
def artifact_id = 'pioneer-gradle-plugin' // 这里要和module的名称一样，不然在bintray上会生成两个目录
def artifact_version='0.0.42-SNAPSHOT'

// 发布到组织名称名字，必须填写
group = artifact_group
// 版本号，下次更新是只需要更改版本号即可
version = artifact_version

task sourceJar(type: Jar, dependsOn:classes) {
    getArchiveClassifier().set('sources') // classifier = 'sources'
    from sourceSets.main.allSource // project.file('src/main/groovy') and android.sourceSets.main.java.srcDirs
}

// 这个不能要，不然报Cannot add task 'javadoc' as a task with that name already exists.
//task javadoc(type: Javadoc) {
//    source = project.file('src/main/groovy') // android.sourceSets.main.java.srcDirs
//    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//}

task javadocJar(type: Jar, dependsOn: javadoc) {
    getArchiveClassifier().set('javadoc') // classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourceJar
}

// 打包到本地或者Maven私服库
afterEvaluate {
    publishing {
        publications {
            mavenProduction(MavenPublication) {
                //group,artifactId和version
                groupId = artifact_group
                artifactId = artifact_id
                version = artifact_version

                from components.java

                artifact sourceJar
                artifact javadocJar

                pom {
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                }
            }
        }

        repositories {
            maven {
                url = artifact_version.endsWith('SNAPSHOT') ? repoUrlSnapshots : repoUrlRelease
                credentials {
                    username = repoUrlAccountName
                    password = repoUrlAccountPwd
                }
            }
        }
    }
}




/// 1. 发布到本次仓库或者私有仓库:
// 1.1 local.properties中的LOCAL_MAVEN改成true,
// 1.2 执行命令 ./gradlew :pioneer-gradle-plugin:uploadArchives

/// 2. 发布到jcenter
/// 在项目根目录依次输入下面两个命令
/// 2.1 ./gradlew install
/// 2.2 ./gradlew bintrayUpload

////// 参考文章： https://blog.csdn.net/linglongxin24/article/details/53415932
////// 还有一篇宣传极简文章：https://juejin.im/post/59cef9baf265da066a105f92
////// 也可以像arouter那样把install和bintray拆封成两个文件install.gradle和bintray.gradle
////// butterknife中对android和java包做了区分，值得参考 https://github.com/JakeWharton/butterknife/blob/master/gradle/gradle-mvn-push.gradle