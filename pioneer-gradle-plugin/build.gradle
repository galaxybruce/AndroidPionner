apply plugin: "groovy"
apply plugin: "maven"

apply plugin: 'com.jfrog.bintray'

// 这个插件貌似是android library时用到
//apply plugin: 'com.github.dcendents.android-maven'


sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

buildscript {
    repositories {
        maven { url "https://maven.aliyun.com/repository/google" }
        maven { url "https://maven.aliyun.com/repository/central" }
        maven { url "https://maven.aliyun.com/repository/jcenter" }
        maven { url "http://maven.aliyun.com/nexus/content/repositories/releases" }

        jcenter()
        mavenCentral()
    }
    dependencies {
//        classpath 'com.novoda:bintray-release:0.3.4'
    }
}

dependencies {
    compileOnly gradleApi()
    compileOnly localGroovy()
    compileOnly 'com.android.tools.build:gradle:3.4.1'
    compile "com.alibaba:fastjson:1.2.46"
}

//repositories {
//    maven { url "https://maven.aliyun.com/repository/google" }
//    maven { url "https://maven.aliyun.com/repository/central" }
//    maven { url "https://maven.aliyun.com/repository/jcenter" }
//    maven { url "http://maven.aliyun.com/nexus/content/repositories/releases" }
//
//    jcenter()
//    mavenCentral()
//}


/// 这几个task必须要有，不然没法add to jcenter
task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource // project.file('src/main/groovy')  android.sourceSets.main.java.srcDirs
}

// 这个不能要，不然报Cannot add task 'javadoc' as a task with that name already exists.
//task javadoc(type: Javadoc) {
//    source = project.file('src/main/groovy') // android.sourceSets.main.java.srcDirs
//    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

def debug_flag = rootProject.hasProperty("LOCAL_MAVEN") && LOCAL_MAVEN.toBoolean() //true: 发布到本地maven仓库， false： 发布到maven私服
def artifact_group = 'com.galaxybruce.android'
def artifact_id = 'pioneer-gradle-plugin' // 这里要和module的名称一样，不然在bintray上会生成两个目录
def artifact_version='0.0.14'


// 打包到本地或者Maven私服库
uploadArchives {
    repositories {
        mavenDeployer {
            //group,artifactId和version
            pom.groupId = artifact_group
            pom.artifactId = artifact_id
            pom.version = artifact_version

            pom.project {
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
            }

            if (debug_flag) {
                // deploy到本地仓库
                // 注意：要放在第一行，不然会被线上的覆盖了
                // 引用方式
                // maven{ url rootProject.file("repo-local") }

                // 或者 (注意：settings.gradle必须这样引用)
                // def projectDir = settings.rootProject.projectDir
                // def repoFile = new File(projectDir, 'repo-local')
                // maven{ url repoFile }
                repository(url: uri(project.rootProject.projectDir.absolutePath + '/repo-local'))
            } else {
                // 提交到远程服务器：
//                repository(url: "http://maven.xxx.com:8081/nexus/content/repositories/releases") {
//                    authentication(userName: "deployment", password: "123456")
//                }

//                snapshotRepository(url: "http://maven.xxx.com:8081/nexus/content/repositories/releases") {
//                    authentication(userName: "deployment", password: "123456")
//                }
            }
        }
    }
}





// 上传到bintray
// 定义两个链接，下面会用到。
def siteUrl = 'https://github.com/galaxybruce/AndroidPionner' // 项目主页。
def gitUrl = 'https://github.com/galaxybruce/AndroidPionner.git' // Git仓库的url。

// 发布到组织名称名字，必须填写
group = artifact_group
// 版本号，下次更新是只需要更改版本号即可
version = artifact_version

install {
    repositories.mavenInstaller {
        // 生成pom.xml和参数
        pom {
            project {
                packaging 'jar'
                groupId artifact_group
                artifactId artifact_id // 这里不填默认是用module的名字pioneer-gradle-plugin

                // 项目描述，复制我的话，这里需要修改。
                name 'AndroidPionner'// 可选，项目名称。
                description 'a gradle plugin project for android compile.'// 可选，项目描述。
                url siteUrl // 项目主页，这里是引用上面定义好。

                // 软件开源协议，现在一般都是Apache License2.0吧，复制我的，这里不需要修改。
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                //填写开发者基本信息，复制我的，这里需要修改。
                developers {
                    developer {
                        id 'galaxybruce' // 开发者的id。
                        name 'galaxybruce' // 开发者名字。
                        email 'brucezhanggood@gmail.com' // 开发者邮箱。
                    }
                }

                // SCM，复制我的，这里不需要修改。
                scm {
                    connection gitUrl // Git仓库地址。
                    developerConnection gitUrl // Git仓库地址。
                    url siteUrl // 项目主页。
                }
            }
        }
    }
}

// 这里是读取Bintray相关的信息，我们上传项目到github上的时候会把gradle文件传上去，
// 所以不要把帐号密码的信息直接写在这里，写在local.properties中，这里动态读取。
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
bintray {
    user = properties.getProperty("bintray.user") // Bintray的用户名。
    key = properties.getProperty("bintray.apikey") // Bintray刚才保存的ApiKey。

    configurations = ['archives']
    pkg {
        repo = 'maven'  // 请在bintray创建一个仓库，这里填改成你创建的仓库的名字
        name = artifact_id  // 发布到Bintray上的项目名字，这里的名字不是compile 'com.yanzhenjie:andserver:1.0.1'中的andserver。
//        userOrg = properties.getProperty("bintray.userOrg") // 新版的jcenter,需要提供你创建的组织名称，不然无法上传成功
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = ["Apache-2.0"]
        publish = true // 是否是公开项目。
        publicDownloadNumbers = true
    }
}

/// 1. 发布到本次仓库或者私有仓库，执行命令 ./gradlew :pioneer-gradle-plugin:uploadArchives

/// 2. 发布到jcenter
/// 在项目根目录依次输入下面两个命令
/// ./gradlew install
/// ./gradlew bintrayUpload

////// 参考文章： https://blog.csdn.net/linglongxin24/article/details/53415932
////// 还有一篇宣传极简文章：https://juejin.im/post/59cef9baf265da066a105f92
////// 也可以像arouter那样把install和bintray拆封成两个文件install.gradle和bintray.gradle
////// butterknife中对android和java包做了区分，值得参考 https://github.com/JakeWharton/butterknife/blob/master/gradle/gradle-mvn-push.gradle