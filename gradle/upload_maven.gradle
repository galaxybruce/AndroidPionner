apply plugin: "maven-publish"

if (project.hasProperty("android") ||
        project.getPlugins().hasPlugin('com.android.application') ||
        project.getPlugins().hasPlugin('com.android.library')) { // Android libraries

//            project.task('javadocs', type: Javadoc) {
//                source = project.android.sourceSets.main.java.srcDirs
//                classpath += project.files(project.android.getBootClasspath().join(File.pathSeparator))
//            }
//
//            project.task('javadocJar', type: Jar, dependsOn: project.javadocs) {
//                getArchiveClassifier().set('javadoc')
//                from project.javadocs.destinationDir
//            }

    project.task('sourceJar', type: Jar) {
        getArchiveClassifier().set('sources')
        from project.android.sourceSets.main.java.srcDirs
    }

    project.artifacts {
        archives project.tasks.sourceJar
//                archives project.tasks.javadocJar
    }
} else { // Java libraries
//            project.task('javadocJar', type: Jar, dependsOn: project.javadoc) {
//                getArchiveClassifier().set('javadoc')
//                from project.javadoc.destinationDir
//            }
//
//            project.task('sourceJar', type: Jar, dependsOn: project.classes) {
//                getArchiveClassifier().set('sources')
//                from project.android.sourceSets.main.allSource
//            }

    project.artifacts {
        archives project.tasks.sourceJar
//                archives project.tasks.javadocJar
    }
}


Properties properties = new Properties()
File rootProjectPropertiesFile = project.rootProject.file("gradle.properties")
if (rootProjectPropertiesFile.exists()) {
    properties.load(rootProjectPropertiesFile.newDataInputStream())
}

def mavenUrl = properties.getProperty("MAVEN_URL")
def mavenUrlSnapShot = properties.getProperty("MAVEN_URL_SNAPSHOT")
def mavenAccount = properties.getProperty("MAVEN_ACCOUNT_NAME")
def mavenPwd = properties.getProperty("MAVEN_ACCOUNT_PWD")

def pomGroupId = properties.getProperty("project.groupId")
def pomArtifactId = project.name
def pomVersion = project.version

// json配置文件优先级最高，这些数据在galaxybruce-pioneer插件中读取
if(project.rootProject.ext.has('pomGroupId') && project.rootProject.ext.pomGroupId) {
    pomGroupId = project.rootProject.ext.pomGroupId
}
if(project.ext.has('artifactId') && project.ext.artifactId) {
    pomArtifactId = project.ext.artifactId
}
if(project.ext.has('platformSourceDir') && project.ext.platformSourceDir) {
    pomArtifactId += '-' + project.ext.platformSourceDir
}
if(project.ext.has('version') && project.ext.version) {
    pomVersion = project.ext.version
}

project.group = pomGroupId
project.version = pomVersion
println("======maven configuration project: ${project.name} -- mavenUrl: ${mavenUrl} -- mavenName: ${mavenAccount} -- mavenPwd: ${mavenPwd}")
println("======maven configuration project: ${project.name} -- groupId: ${pomGroupId}:${pomArtifactId}:${pomVersion}")


// 打包到本地或者Maven私服库
afterEvaluate {
    publishing {
        publications {
            mavenProduction(MavenPublication) {
                groupId = pomGroupId
                artifactId = pomArtifactId
                version = pomVersion

                project.afterEvaluate {
                    from project.components.release
                }

                artifact project.tasks.sourceJar
//                artifact project.tasks.javadocJar

                pom {
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    withXml {
                        asNode().dependencies.'*'.findAll() {
                            it.scope.text() == 'runtime' && project.configurations.implementation.allDependencies.find { dep ->
                                dep.name == it.artifactId.text()
                            }
                        }.each {
                            it.scope*.value = 'compile'
                        }
                    }
                }
            }
        }

        repositories {
            maven {
                url = pomVersion.endsWith('SNAPSHOT') ? mavenUrlSnapShot : mavenUrl
                credentials {
                    username = mavenAccount
                    password = mavenPwd
                }
                allowInsecureProtocol = true
            }
        }
    }
}
