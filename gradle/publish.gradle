/**
 * 参考文章：[Android库发布到Maven Central全攻略](https://juejin.cn/post/6932485276124233735)
 */

apply plugin: "maven-publish"

def localProperties = new Properties()
def localPropertiesFile = new File(rootDir, 'local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def publishChannel = PUBLISH_CHANNEL
if(publishChannel == '1') {
    apply plugin: 'signing'

    // GPG签名需要我们在gradle.properties里面增加几个属性值 或者 放在local.properties中，然后读取到ext中
    ext["signing.keyId"] = localProperties.getProperty("signing.keyId", '')
    ext["signing.password"] = localProperties.getProperty("signing.password", '')
    ext["signing.secretKeyRingFile"] = localProperties.getProperty("secretKeyRingFile.keyId", '')
    ext["ossrhUsername"] = localProperties.getProperty("ossrhUsername", '')
    ext["ossrhPassword"] = localProperties.getProperty("ossrhPassword", '')
    ext["releasesUrl"] = "https://s01.oss.sonatype.org/content/repositories/releases/"
    ext["snapshotUrl"] = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
} else if(publishChannel == '2') {
    ext["ossrhUsername"] = localProperties.getProperty('MAVEN_ACCOUNT_NAME')
    ext["ossrhPassword"] = localProperties.getProperty('MAVEN_ACCOUNT_PWD')
    ext["releasesUrl"] = localProperties.getProperty('MAVEN_URL_RELEASE')
    ext["snapshotUrl"] = localProperties.getProperty('MAVEN_URL_SNAPSHOT')
}

def artifact_group = POM_GROUP
def artifact_id = POM_ARTIFACT_ID // 这里要和module的名称一样，不然在bintray上会生成两个目录
def artifact_version = POM_VERSION_NAME

// 发布到组织名称名字，必须填写
group = artifact_group
// 版本号，下次更新是只需要更改版本号即可
version = artifact_version

def isAndroid = project.hasProperty("android") ||
        project.getPlugins().hasPlugin('com.android.application') ||
        project.getPlugins().hasPlugin('com.android.library')
if (isAndroid) {
    task androidJavadocs(type: Javadoc) {
        source = android.sourceSets.main.java.source
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }

    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
        getArchiveClassifier().set('javadoc')
        from androidJavadocs.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        getArchiveClassifier().set('sources')
        from android.sourceSets.main.java.source
    }

    artifacts {
        archives androidSourcesJar
        archives androidJavadocsJar
    }
} else {
    task sourceJar(type: Jar, dependsOn:classes) {
        getArchiveClassifier().set('sources') // classifier = 'sources'
        from sourceSets.main.allSource // project.file('src/main/groovy') and android.sourceSets.main.java.srcDirs
    }

    //这个不能要，不然报Cannot add task 'javadoc' as a task with that name already exists.
//    task javadoc(type: Javadoc) {
//        source = project.file('src/main/groovy') // android.sourceSets.main.java.srcDirs
//        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        getArchiveClassifier().set('javadoc') // classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives javadocJar
        archives sourceJar
    }
}

// 打包到本地或者Maven私服库
afterEvaluate {
    publishing {
        publications {
            mavenProduction(MavenPublication) {
                groupId = artifact_group
                artifactId = artifact_id
                version = artifact_version

                if (isAndroid) {
                    from components.release

                    artifact androidSourcesJar
                    artifact androidJavadocsJar
                } else {
                    from components.java

                    artifact sourceJar
                    artifact javadocJar
                }

                pom {
                    if(publishChannel == '1') {
                        name = artifact_id
                        description = POM_DESCRIPTION
                        url = POM_URL

                        developers {
                            developer {
                                id POM_DEVELOPER_ID // 开发者的id。
                                name POM_DEVELOPER_NAME // 开发者名字。
                                email POM_DEVELOPER_EMAIL // 开发者邮箱。
                            }
                        }

                        scm {
                            connection POM_SCM_CONNECTION // Git仓库地址。
                            developerConnection POM_SCM_DEV_CONNECTION // Git仓库地址。
                            url POM_SCM_URL // 项目主页。
                        }
                    }

                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    withXml {
                        asNode().dependencies.'*'.findAll() {
                            it.scope.text() == 'runtime' && project.configurations.implementation.allDependencies.find { dep ->
                                dep.name == it.artifactId.text()
                            }
                        }.each {
                            it.scope*.value = 'compile'
                        }
                    }
                }
            }
        }

        repositories {
            maven {
                //  1:发布到MavenCentral 2:发布到内网maven 其他值:发布到repo-local
                if(publishChannel == '1' || publishChannel == '2'){
                    url = artifact_version.endsWith('SNAPSHOT') ? project.ext.snapshotUrl : project.ext.releasesUrl
                    credentials {
                        username = project.ext.ossrhUsername
                        password = project.ext.ossrhPassword
                    }
                    allowInsecureProtocol = true
                } else {
                    url = project.uri(project.rootProject.projectDir.absolutePath + '/repo-local')
                }
            }
        }
    }

    if(publishChannel == '1') {
        signing {
            sign publishing.publications
        }
    }
}
